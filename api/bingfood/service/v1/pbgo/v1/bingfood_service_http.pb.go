// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBingfoodServiceAddCartItem = "/bingfood.service.v1.BingfoodService/AddCartItem"
const OperationBingfoodServiceOrderSettle = "/bingfood.service.v1.BingfoodService/OrderSettle"
const OperationBingfoodServiceUserLoginOrRegister = "/bingfood.service.v1.BingfoodService/UserLoginOrRegister"

type BingfoodServiceHTTPServer interface {
	AddCartItem(context.Context, *AddCartItemRequest) (*AddCartItemReply, error)
	OrderSettle(context.Context, *SettleOrderRequest) (*SettleOrderReply, error)
	UserLoginOrRegister(context.Context, *UserLoginOrRegisterRequest) (*UserLoginOrRegisterReply, error)
}

func RegisterBingfoodServiceHTTPServer(s *http.Server, srv BingfoodServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/order/settle", _BingfoodService_OrderSettle0_HTTP_Handler(srv))
	r.POST("/cart/addItem", _BingfoodService_AddCartItem0_HTTP_Handler(srv))
	r.POST("/user/login", _BingfoodService_UserLoginOrRegister0_HTTP_Handler(srv))
}

func _BingfoodService_OrderSettle0_HTTP_Handler(srv BingfoodServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SettleOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBingfoodServiceOrderSettle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderSettle(ctx, req.(*SettleOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SettleOrderReply)
		return ctx.Result(200, reply)
	}
}

func _BingfoodService_AddCartItem0_HTTP_Handler(srv BingfoodServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddCartItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBingfoodServiceAddCartItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddCartItem(ctx, req.(*AddCartItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddCartItemReply)
		return ctx.Result(200, reply)
	}
}

func _BingfoodService_UserLoginOrRegister0_HTTP_Handler(srv BingfoodServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserLoginOrRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBingfoodServiceUserLoginOrRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserLoginOrRegister(ctx, req.(*UserLoginOrRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserLoginOrRegisterReply)
		return ctx.Result(200, reply)
	}
}

type BingfoodServiceHTTPClient interface {
	AddCartItem(ctx context.Context, req *AddCartItemRequest, opts ...http.CallOption) (rsp *AddCartItemReply, err error)
	OrderSettle(ctx context.Context, req *SettleOrderRequest, opts ...http.CallOption) (rsp *SettleOrderReply, err error)
	UserLoginOrRegister(ctx context.Context, req *UserLoginOrRegisterRequest, opts ...http.CallOption) (rsp *UserLoginOrRegisterReply, err error)
}

type BingfoodServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBingfoodServiceHTTPClient(client *http.Client) BingfoodServiceHTTPClient {
	return &BingfoodServiceHTTPClientImpl{client}
}

func (c *BingfoodServiceHTTPClientImpl) AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...http.CallOption) (*AddCartItemReply, error) {
	var out AddCartItemReply
	pattern := "/cart/addItem"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBingfoodServiceAddCartItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BingfoodServiceHTTPClientImpl) OrderSettle(ctx context.Context, in *SettleOrderRequest, opts ...http.CallOption) (*SettleOrderReply, error) {
	var out SettleOrderReply
	pattern := "/order/settle"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBingfoodServiceOrderSettle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BingfoodServiceHTTPClientImpl) UserLoginOrRegister(ctx context.Context, in *UserLoginOrRegisterRequest, opts ...http.CallOption) (*UserLoginOrRegisterReply, error) {
	var out UserLoginOrRegisterReply
	pattern := "/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBingfoodServiceUserLoginOrRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
