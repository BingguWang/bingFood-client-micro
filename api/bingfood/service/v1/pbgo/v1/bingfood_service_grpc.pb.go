// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: v1/bingfood_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BingfoodServiceClient is the client API for BingfoodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BingfoodServiceClient interface {
	OrderSettle(ctx context.Context, in *SettleOrderRequest, opts ...grpc.CallOption) (*SettleOrderReply, error)
	AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...grpc.CallOption) (*AddCartItemReply, error)
	UserLoginOrRegister(ctx context.Context, in *UserLoginOrRegisterRequest, opts ...grpc.CallOption) (*UserLoginOrRegisterReply, error)
}

type bingfoodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBingfoodServiceClient(cc grpc.ClientConnInterface) BingfoodServiceClient {
	return &bingfoodServiceClient{cc}
}

func (c *bingfoodServiceClient) OrderSettle(ctx context.Context, in *SettleOrderRequest, opts ...grpc.CallOption) (*SettleOrderReply, error) {
	out := new(SettleOrderReply)
	err := c.cc.Invoke(ctx, "/bingfood.service.v1.BingfoodService/OrderSettle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bingfoodServiceClient) AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...grpc.CallOption) (*AddCartItemReply, error) {
	out := new(AddCartItemReply)
	err := c.cc.Invoke(ctx, "/bingfood.service.v1.BingfoodService/AddCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bingfoodServiceClient) UserLoginOrRegister(ctx context.Context, in *UserLoginOrRegisterRequest, opts ...grpc.CallOption) (*UserLoginOrRegisterReply, error) {
	out := new(UserLoginOrRegisterReply)
	err := c.cc.Invoke(ctx, "/bingfood.service.v1.BingfoodService/UserLoginOrRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BingfoodServiceServer is the server API for BingfoodService service.
// All implementations must embed UnimplementedBingfoodServiceServer
// for forward compatibility
type BingfoodServiceServer interface {
	OrderSettle(context.Context, *SettleOrderRequest) (*SettleOrderReply, error)
	AddCartItem(context.Context, *AddCartItemRequest) (*AddCartItemReply, error)
	UserLoginOrRegister(context.Context, *UserLoginOrRegisterRequest) (*UserLoginOrRegisterReply, error)
	mustEmbedUnimplementedBingfoodServiceServer()
}

// UnimplementedBingfoodServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBingfoodServiceServer struct {
}

func (UnimplementedBingfoodServiceServer) OrderSettle(context.Context, *SettleOrderRequest) (*SettleOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderSettle not implemented")
}
func (UnimplementedBingfoodServiceServer) AddCartItem(context.Context, *AddCartItemRequest) (*AddCartItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCartItem not implemented")
}
func (UnimplementedBingfoodServiceServer) UserLoginOrRegister(context.Context, *UserLoginOrRegisterRequest) (*UserLoginOrRegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginOrRegister not implemented")
}
func (UnimplementedBingfoodServiceServer) mustEmbedUnimplementedBingfoodServiceServer() {}

// UnsafeBingfoodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BingfoodServiceServer will
// result in compilation errors.
type UnsafeBingfoodServiceServer interface {
	mustEmbedUnimplementedBingfoodServiceServer()
}

func RegisterBingfoodServiceServer(s grpc.ServiceRegistrar, srv BingfoodServiceServer) {
	s.RegisterService(&BingfoodService_ServiceDesc, srv)
}

func _BingfoodService_OrderSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BingfoodServiceServer).OrderSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bingfood.service.v1.BingfoodService/OrderSettle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BingfoodServiceServer).OrderSettle(ctx, req.(*SettleOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BingfoodService_AddCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BingfoodServiceServer).AddCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bingfood.service.v1.BingfoodService/AddCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BingfoodServiceServer).AddCartItem(ctx, req.(*AddCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BingfoodService_UserLoginOrRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginOrRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BingfoodServiceServer).UserLoginOrRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bingfood.service.v1.BingfoodService/UserLoginOrRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BingfoodServiceServer).UserLoginOrRegister(ctx, req.(*UserLoginOrRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BingfoodService_ServiceDesc is the grpc.ServiceDesc for BingfoodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BingfoodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bingfood.service.v1.BingfoodService",
	HandlerType: (*BingfoodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderSettle",
			Handler:    _BingfoodService_OrderSettle_Handler,
		},
		{
			MethodName: "AddCartItem",
			Handler:    _BingfoodService_AddCartItem_Handler,
		},
		{
			MethodName: "UserLoginOrRegister",
			Handler:    _BingfoodService_UserLoginOrRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/bingfood_service.proto",
}
